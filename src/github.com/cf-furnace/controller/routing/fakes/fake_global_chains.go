// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cf-furnace/controller/routing/iptables"
	"k8s.io/kubernetes/pkg/api/v1"
)

type FakeGlobalChains struct {
	CreateInstanceChainStub        func(table iptables.Table, pod *v1.Pod) (string, error)
	createInstanceChainMutex       sync.RWMutex
	createInstanceChainArgsForCall []struct {
		table iptables.Table
		pod   *v1.Pod
	}
	createInstanceChainReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGlobalChains) CreateInstanceChain(table iptables.Table, pod *v1.Pod) (string, error) {
	fake.createInstanceChainMutex.Lock()
	fake.createInstanceChainArgsForCall = append(fake.createInstanceChainArgsForCall, struct {
		table iptables.Table
		pod   *v1.Pod
	}{table, pod})
	fake.recordInvocation("CreateInstanceChain", []interface{}{table, pod})
	fake.createInstanceChainMutex.Unlock()
	if fake.CreateInstanceChainStub != nil {
		return fake.CreateInstanceChainStub(table, pod)
	} else {
		return fake.createInstanceChainReturns.result1, fake.createInstanceChainReturns.result2
	}
}

func (fake *FakeGlobalChains) CreateInstanceChainCallCount() int {
	fake.createInstanceChainMutex.RLock()
	defer fake.createInstanceChainMutex.RUnlock()
	return len(fake.createInstanceChainArgsForCall)
}

func (fake *FakeGlobalChains) CreateInstanceChainArgsForCall(i int) (iptables.Table, *v1.Pod) {
	fake.createInstanceChainMutex.RLock()
	defer fake.createInstanceChainMutex.RUnlock()
	return fake.createInstanceChainArgsForCall[i].table, fake.createInstanceChainArgsForCall[i].pod
}

func (fake *FakeGlobalChains) CreateInstanceChainReturns(result1 string, result2 error) {
	fake.CreateInstanceChainStub = nil
	fake.createInstanceChainReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGlobalChains) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createInstanceChainMutex.RLock()
	defer fake.createInstanceChainMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGlobalChains) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
