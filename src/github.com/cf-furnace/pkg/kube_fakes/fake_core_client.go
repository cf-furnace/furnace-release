// This file was generated by counterfeiter
package kube_fakes

import (
	"sync"

	"k8s.io/kubernetes/pkg/client/clientset_generated/release_1_3/typed/core/v1"
	"k8s.io/kubernetes/pkg/client/restclient"
)

type FakeCoreClient struct {
	GetRESTClientStub        func() *restclient.RESTClient
	getRESTClientMutex       sync.RWMutex
	getRESTClientArgsForCall []struct{}
	getRESTClientReturns     struct {
		result1 *restclient.RESTClient
	}
	ComponentStatusesStub        func() v1.ComponentStatusInterface
	componentStatusesMutex       sync.RWMutex
	componentStatusesArgsForCall []struct{}
	componentStatusesReturns     struct {
		result1 v1.ComponentStatusInterface
	}
	ConfigMapsStub        func(namespace string) v1.ConfigMapInterface
	configMapsMutex       sync.RWMutex
	configMapsArgsForCall []struct {
		namespace string
	}
	configMapsReturns struct {
		result1 v1.ConfigMapInterface
	}
	EndpointsStub        func(namespace string) v1.EndpointsInterface
	endpointsMutex       sync.RWMutex
	endpointsArgsForCall []struct {
		namespace string
	}
	endpointsReturns struct {
		result1 v1.EndpointsInterface
	}
	EventsStub        func(namespace string) v1.EventInterface
	eventsMutex       sync.RWMutex
	eventsArgsForCall []struct {
		namespace string
	}
	eventsReturns struct {
		result1 v1.EventInterface
	}
	LimitRangesStub        func(namespace string) v1.LimitRangeInterface
	limitRangesMutex       sync.RWMutex
	limitRangesArgsForCall []struct {
		namespace string
	}
	limitRangesReturns struct {
		result1 v1.LimitRangeInterface
	}
	NamespacesStub        func() v1.NamespaceInterface
	namespacesMutex       sync.RWMutex
	namespacesArgsForCall []struct{}
	namespacesReturns     struct {
		result1 v1.NamespaceInterface
	}
	NodesStub        func() v1.NodeInterface
	nodesMutex       sync.RWMutex
	nodesArgsForCall []struct{}
	nodesReturns     struct {
		result1 v1.NodeInterface
	}
	PersistentVolumesStub        func() v1.PersistentVolumeInterface
	persistentVolumesMutex       sync.RWMutex
	persistentVolumesArgsForCall []struct{}
	persistentVolumesReturns     struct {
		result1 v1.PersistentVolumeInterface
	}
	PodsStub        func(namespace string) v1.PodInterface
	podsMutex       sync.RWMutex
	podsArgsForCall []struct {
		namespace string
	}
	podsReturns struct {
		result1 v1.PodInterface
	}
	PodTemplatesStub        func(namespace string) v1.PodTemplateInterface
	podTemplatesMutex       sync.RWMutex
	podTemplatesArgsForCall []struct {
		namespace string
	}
	podTemplatesReturns struct {
		result1 v1.PodTemplateInterface
	}
	ReplicationControllersStub        func(namespace string) v1.ReplicationControllerInterface
	replicationControllersMutex       sync.RWMutex
	replicationControllersArgsForCall []struct {
		namespace string
	}
	replicationControllersReturns struct {
		result1 v1.ReplicationControllerInterface
	}
	ResourceQuotasStub        func(namespace string) v1.ResourceQuotaInterface
	resourceQuotasMutex       sync.RWMutex
	resourceQuotasArgsForCall []struct {
		namespace string
	}
	resourceQuotasReturns struct {
		result1 v1.ResourceQuotaInterface
	}
	SecretsStub        func(namespace string) v1.SecretInterface
	secretsMutex       sync.RWMutex
	secretsArgsForCall []struct {
		namespace string
	}
	secretsReturns struct {
		result1 v1.SecretInterface
	}
	ServicesStub        func(namespace string) v1.ServiceInterface
	servicesMutex       sync.RWMutex
	servicesArgsForCall []struct {
		namespace string
	}
	servicesReturns struct {
		result1 v1.ServiceInterface
	}
	ServiceAccountsStub        func(namespace string) v1.ServiceAccountInterface
	serviceAccountsMutex       sync.RWMutex
	serviceAccountsArgsForCall []struct {
		namespace string
	}
	serviceAccountsReturns struct {
		result1 v1.ServiceAccountInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCoreClient) GetRESTClient() *restclient.RESTClient {
	fake.getRESTClientMutex.Lock()
	fake.getRESTClientArgsForCall = append(fake.getRESTClientArgsForCall, struct{}{})
	fake.recordInvocation("GetRESTClient", []interface{}{})
	fake.getRESTClientMutex.Unlock()
	if fake.GetRESTClientStub != nil {
		return fake.GetRESTClientStub()
	} else {
		return fake.getRESTClientReturns.result1
	}
}

func (fake *FakeCoreClient) GetRESTClientCallCount() int {
	fake.getRESTClientMutex.RLock()
	defer fake.getRESTClientMutex.RUnlock()
	return len(fake.getRESTClientArgsForCall)
}

func (fake *FakeCoreClient) GetRESTClientReturns(result1 *restclient.RESTClient) {
	fake.GetRESTClientStub = nil
	fake.getRESTClientReturns = struct {
		result1 *restclient.RESTClient
	}{result1}
}

func (fake *FakeCoreClient) ComponentStatuses() v1.ComponentStatusInterface {
	fake.componentStatusesMutex.Lock()
	fake.componentStatusesArgsForCall = append(fake.componentStatusesArgsForCall, struct{}{})
	fake.recordInvocation("ComponentStatuses", []interface{}{})
	fake.componentStatusesMutex.Unlock()
	if fake.ComponentStatusesStub != nil {
		return fake.ComponentStatusesStub()
	} else {
		return fake.componentStatusesReturns.result1
	}
}

func (fake *FakeCoreClient) ComponentStatusesCallCount() int {
	fake.componentStatusesMutex.RLock()
	defer fake.componentStatusesMutex.RUnlock()
	return len(fake.componentStatusesArgsForCall)
}

func (fake *FakeCoreClient) ComponentStatusesReturns(result1 v1.ComponentStatusInterface) {
	fake.ComponentStatusesStub = nil
	fake.componentStatusesReturns = struct {
		result1 v1.ComponentStatusInterface
	}{result1}
}

func (fake *FakeCoreClient) ConfigMaps(namespace string) v1.ConfigMapInterface {
	fake.configMapsMutex.Lock()
	fake.configMapsArgsForCall = append(fake.configMapsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ConfigMaps", []interface{}{namespace})
	fake.configMapsMutex.Unlock()
	if fake.ConfigMapsStub != nil {
		return fake.ConfigMapsStub(namespace)
	} else {
		return fake.configMapsReturns.result1
	}
}

func (fake *FakeCoreClient) ConfigMapsCallCount() int {
	fake.configMapsMutex.RLock()
	defer fake.configMapsMutex.RUnlock()
	return len(fake.configMapsArgsForCall)
}

func (fake *FakeCoreClient) ConfigMapsArgsForCall(i int) string {
	fake.configMapsMutex.RLock()
	defer fake.configMapsMutex.RUnlock()
	return fake.configMapsArgsForCall[i].namespace
}

func (fake *FakeCoreClient) ConfigMapsReturns(result1 v1.ConfigMapInterface) {
	fake.ConfigMapsStub = nil
	fake.configMapsReturns = struct {
		result1 v1.ConfigMapInterface
	}{result1}
}

func (fake *FakeCoreClient) Endpoints(namespace string) v1.EndpointsInterface {
	fake.endpointsMutex.Lock()
	fake.endpointsArgsForCall = append(fake.endpointsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Endpoints", []interface{}{namespace})
	fake.endpointsMutex.Unlock()
	if fake.EndpointsStub != nil {
		return fake.EndpointsStub(namespace)
	} else {
		return fake.endpointsReturns.result1
	}
}

func (fake *FakeCoreClient) EndpointsCallCount() int {
	fake.endpointsMutex.RLock()
	defer fake.endpointsMutex.RUnlock()
	return len(fake.endpointsArgsForCall)
}

func (fake *FakeCoreClient) EndpointsArgsForCall(i int) string {
	fake.endpointsMutex.RLock()
	defer fake.endpointsMutex.RUnlock()
	return fake.endpointsArgsForCall[i].namespace
}

func (fake *FakeCoreClient) EndpointsReturns(result1 v1.EndpointsInterface) {
	fake.EndpointsStub = nil
	fake.endpointsReturns = struct {
		result1 v1.EndpointsInterface
	}{result1}
}

func (fake *FakeCoreClient) Events(namespace string) v1.EventInterface {
	fake.eventsMutex.Lock()
	fake.eventsArgsForCall = append(fake.eventsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Events", []interface{}{namespace})
	fake.eventsMutex.Unlock()
	if fake.EventsStub != nil {
		return fake.EventsStub(namespace)
	} else {
		return fake.eventsReturns.result1
	}
}

func (fake *FakeCoreClient) EventsCallCount() int {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return len(fake.eventsArgsForCall)
}

func (fake *FakeCoreClient) EventsArgsForCall(i int) string {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return fake.eventsArgsForCall[i].namespace
}

func (fake *FakeCoreClient) EventsReturns(result1 v1.EventInterface) {
	fake.EventsStub = nil
	fake.eventsReturns = struct {
		result1 v1.EventInterface
	}{result1}
}

func (fake *FakeCoreClient) LimitRanges(namespace string) v1.LimitRangeInterface {
	fake.limitRangesMutex.Lock()
	fake.limitRangesArgsForCall = append(fake.limitRangesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("LimitRanges", []interface{}{namespace})
	fake.limitRangesMutex.Unlock()
	if fake.LimitRangesStub != nil {
		return fake.LimitRangesStub(namespace)
	} else {
		return fake.limitRangesReturns.result1
	}
}

func (fake *FakeCoreClient) LimitRangesCallCount() int {
	fake.limitRangesMutex.RLock()
	defer fake.limitRangesMutex.RUnlock()
	return len(fake.limitRangesArgsForCall)
}

func (fake *FakeCoreClient) LimitRangesArgsForCall(i int) string {
	fake.limitRangesMutex.RLock()
	defer fake.limitRangesMutex.RUnlock()
	return fake.limitRangesArgsForCall[i].namespace
}

func (fake *FakeCoreClient) LimitRangesReturns(result1 v1.LimitRangeInterface) {
	fake.LimitRangesStub = nil
	fake.limitRangesReturns = struct {
		result1 v1.LimitRangeInterface
	}{result1}
}

func (fake *FakeCoreClient) Namespaces() v1.NamespaceInterface {
	fake.namespacesMutex.Lock()
	fake.namespacesArgsForCall = append(fake.namespacesArgsForCall, struct{}{})
	fake.recordInvocation("Namespaces", []interface{}{})
	fake.namespacesMutex.Unlock()
	if fake.NamespacesStub != nil {
		return fake.NamespacesStub()
	} else {
		return fake.namespacesReturns.result1
	}
}

func (fake *FakeCoreClient) NamespacesCallCount() int {
	fake.namespacesMutex.RLock()
	defer fake.namespacesMutex.RUnlock()
	return len(fake.namespacesArgsForCall)
}

func (fake *FakeCoreClient) NamespacesReturns(result1 v1.NamespaceInterface) {
	fake.NamespacesStub = nil
	fake.namespacesReturns = struct {
		result1 v1.NamespaceInterface
	}{result1}
}

func (fake *FakeCoreClient) Nodes() v1.NodeInterface {
	fake.nodesMutex.Lock()
	fake.nodesArgsForCall = append(fake.nodesArgsForCall, struct{}{})
	fake.recordInvocation("Nodes", []interface{}{})
	fake.nodesMutex.Unlock()
	if fake.NodesStub != nil {
		return fake.NodesStub()
	} else {
		return fake.nodesReturns.result1
	}
}

func (fake *FakeCoreClient) NodesCallCount() int {
	fake.nodesMutex.RLock()
	defer fake.nodesMutex.RUnlock()
	return len(fake.nodesArgsForCall)
}

func (fake *FakeCoreClient) NodesReturns(result1 v1.NodeInterface) {
	fake.NodesStub = nil
	fake.nodesReturns = struct {
		result1 v1.NodeInterface
	}{result1}
}

func (fake *FakeCoreClient) PersistentVolumes() v1.PersistentVolumeInterface {
	fake.persistentVolumesMutex.Lock()
	fake.persistentVolumesArgsForCall = append(fake.persistentVolumesArgsForCall, struct{}{})
	fake.recordInvocation("PersistentVolumes", []interface{}{})
	fake.persistentVolumesMutex.Unlock()
	if fake.PersistentVolumesStub != nil {
		return fake.PersistentVolumesStub()
	} else {
		return fake.persistentVolumesReturns.result1
	}
}

func (fake *FakeCoreClient) PersistentVolumesCallCount() int {
	fake.persistentVolumesMutex.RLock()
	defer fake.persistentVolumesMutex.RUnlock()
	return len(fake.persistentVolumesArgsForCall)
}

func (fake *FakeCoreClient) PersistentVolumesReturns(result1 v1.PersistentVolumeInterface) {
	fake.PersistentVolumesStub = nil
	fake.persistentVolumesReturns = struct {
		result1 v1.PersistentVolumeInterface
	}{result1}
}

func (fake *FakeCoreClient) Pods(namespace string) v1.PodInterface {
	fake.podsMutex.Lock()
	fake.podsArgsForCall = append(fake.podsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Pods", []interface{}{namespace})
	fake.podsMutex.Unlock()
	if fake.PodsStub != nil {
		return fake.PodsStub(namespace)
	} else {
		return fake.podsReturns.result1
	}
}

func (fake *FakeCoreClient) PodsCallCount() int {
	fake.podsMutex.RLock()
	defer fake.podsMutex.RUnlock()
	return len(fake.podsArgsForCall)
}

func (fake *FakeCoreClient) PodsArgsForCall(i int) string {
	fake.podsMutex.RLock()
	defer fake.podsMutex.RUnlock()
	return fake.podsArgsForCall[i].namespace
}

func (fake *FakeCoreClient) PodsReturns(result1 v1.PodInterface) {
	fake.PodsStub = nil
	fake.podsReturns = struct {
		result1 v1.PodInterface
	}{result1}
}

func (fake *FakeCoreClient) PodTemplates(namespace string) v1.PodTemplateInterface {
	fake.podTemplatesMutex.Lock()
	fake.podTemplatesArgsForCall = append(fake.podTemplatesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("PodTemplates", []interface{}{namespace})
	fake.podTemplatesMutex.Unlock()
	if fake.PodTemplatesStub != nil {
		return fake.PodTemplatesStub(namespace)
	} else {
		return fake.podTemplatesReturns.result1
	}
}

func (fake *FakeCoreClient) PodTemplatesCallCount() int {
	fake.podTemplatesMutex.RLock()
	defer fake.podTemplatesMutex.RUnlock()
	return len(fake.podTemplatesArgsForCall)
}

func (fake *FakeCoreClient) PodTemplatesArgsForCall(i int) string {
	fake.podTemplatesMutex.RLock()
	defer fake.podTemplatesMutex.RUnlock()
	return fake.podTemplatesArgsForCall[i].namespace
}

func (fake *FakeCoreClient) PodTemplatesReturns(result1 v1.PodTemplateInterface) {
	fake.PodTemplatesStub = nil
	fake.podTemplatesReturns = struct {
		result1 v1.PodTemplateInterface
	}{result1}
}

func (fake *FakeCoreClient) ReplicationControllers(namespace string) v1.ReplicationControllerInterface {
	fake.replicationControllersMutex.Lock()
	fake.replicationControllersArgsForCall = append(fake.replicationControllersArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ReplicationControllers", []interface{}{namespace})
	fake.replicationControllersMutex.Unlock()
	if fake.ReplicationControllersStub != nil {
		return fake.ReplicationControllersStub(namespace)
	} else {
		return fake.replicationControllersReturns.result1
	}
}

func (fake *FakeCoreClient) ReplicationControllersCallCount() int {
	fake.replicationControllersMutex.RLock()
	defer fake.replicationControllersMutex.RUnlock()
	return len(fake.replicationControllersArgsForCall)
}

func (fake *FakeCoreClient) ReplicationControllersArgsForCall(i int) string {
	fake.replicationControllersMutex.RLock()
	defer fake.replicationControllersMutex.RUnlock()
	return fake.replicationControllersArgsForCall[i].namespace
}

func (fake *FakeCoreClient) ReplicationControllersReturns(result1 v1.ReplicationControllerInterface) {
	fake.ReplicationControllersStub = nil
	fake.replicationControllersReturns = struct {
		result1 v1.ReplicationControllerInterface
	}{result1}
}

func (fake *FakeCoreClient) ResourceQuotas(namespace string) v1.ResourceQuotaInterface {
	fake.resourceQuotasMutex.Lock()
	fake.resourceQuotasArgsForCall = append(fake.resourceQuotasArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ResourceQuotas", []interface{}{namespace})
	fake.resourceQuotasMutex.Unlock()
	if fake.ResourceQuotasStub != nil {
		return fake.ResourceQuotasStub(namespace)
	} else {
		return fake.resourceQuotasReturns.result1
	}
}

func (fake *FakeCoreClient) ResourceQuotasCallCount() int {
	fake.resourceQuotasMutex.RLock()
	defer fake.resourceQuotasMutex.RUnlock()
	return len(fake.resourceQuotasArgsForCall)
}

func (fake *FakeCoreClient) ResourceQuotasArgsForCall(i int) string {
	fake.resourceQuotasMutex.RLock()
	defer fake.resourceQuotasMutex.RUnlock()
	return fake.resourceQuotasArgsForCall[i].namespace
}

func (fake *FakeCoreClient) ResourceQuotasReturns(result1 v1.ResourceQuotaInterface) {
	fake.ResourceQuotasStub = nil
	fake.resourceQuotasReturns = struct {
		result1 v1.ResourceQuotaInterface
	}{result1}
}

func (fake *FakeCoreClient) Secrets(namespace string) v1.SecretInterface {
	fake.secretsMutex.Lock()
	fake.secretsArgsForCall = append(fake.secretsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Secrets", []interface{}{namespace})
	fake.secretsMutex.Unlock()
	if fake.SecretsStub != nil {
		return fake.SecretsStub(namespace)
	} else {
		return fake.secretsReturns.result1
	}
}

func (fake *FakeCoreClient) SecretsCallCount() int {
	fake.secretsMutex.RLock()
	defer fake.secretsMutex.RUnlock()
	return len(fake.secretsArgsForCall)
}

func (fake *FakeCoreClient) SecretsArgsForCall(i int) string {
	fake.secretsMutex.RLock()
	defer fake.secretsMutex.RUnlock()
	return fake.secretsArgsForCall[i].namespace
}

func (fake *FakeCoreClient) SecretsReturns(result1 v1.SecretInterface) {
	fake.SecretsStub = nil
	fake.secretsReturns = struct {
		result1 v1.SecretInterface
	}{result1}
}

func (fake *FakeCoreClient) Services(namespace string) v1.ServiceInterface {
	fake.servicesMutex.Lock()
	fake.servicesArgsForCall = append(fake.servicesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("Services", []interface{}{namespace})
	fake.servicesMutex.Unlock()
	if fake.ServicesStub != nil {
		return fake.ServicesStub(namespace)
	} else {
		return fake.servicesReturns.result1
	}
}

func (fake *FakeCoreClient) ServicesCallCount() int {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return len(fake.servicesArgsForCall)
}

func (fake *FakeCoreClient) ServicesArgsForCall(i int) string {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return fake.servicesArgsForCall[i].namespace
}

func (fake *FakeCoreClient) ServicesReturns(result1 v1.ServiceInterface) {
	fake.ServicesStub = nil
	fake.servicesReturns = struct {
		result1 v1.ServiceInterface
	}{result1}
}

func (fake *FakeCoreClient) ServiceAccounts(namespace string) v1.ServiceAccountInterface {
	fake.serviceAccountsMutex.Lock()
	fake.serviceAccountsArgsForCall = append(fake.serviceAccountsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ServiceAccounts", []interface{}{namespace})
	fake.serviceAccountsMutex.Unlock()
	if fake.ServiceAccountsStub != nil {
		return fake.ServiceAccountsStub(namespace)
	} else {
		return fake.serviceAccountsReturns.result1
	}
}

func (fake *FakeCoreClient) ServiceAccountsCallCount() int {
	fake.serviceAccountsMutex.RLock()
	defer fake.serviceAccountsMutex.RUnlock()
	return len(fake.serviceAccountsArgsForCall)
}

func (fake *FakeCoreClient) ServiceAccountsArgsForCall(i int) string {
	fake.serviceAccountsMutex.RLock()
	defer fake.serviceAccountsMutex.RUnlock()
	return fake.serviceAccountsArgsForCall[i].namespace
}

func (fake *FakeCoreClient) ServiceAccountsReturns(result1 v1.ServiceAccountInterface) {
	fake.ServiceAccountsStub = nil
	fake.serviceAccountsReturns = struct {
		result1 v1.ServiceAccountInterface
	}{result1}
}

func (fake *FakeCoreClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRESTClientMutex.RLock()
	defer fake.getRESTClientMutex.RUnlock()
	fake.componentStatusesMutex.RLock()
	defer fake.componentStatusesMutex.RUnlock()
	fake.configMapsMutex.RLock()
	defer fake.configMapsMutex.RUnlock()
	fake.endpointsMutex.RLock()
	defer fake.endpointsMutex.RUnlock()
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	fake.limitRangesMutex.RLock()
	defer fake.limitRangesMutex.RUnlock()
	fake.namespacesMutex.RLock()
	defer fake.namespacesMutex.RUnlock()
	fake.nodesMutex.RLock()
	defer fake.nodesMutex.RUnlock()
	fake.persistentVolumesMutex.RLock()
	defer fake.persistentVolumesMutex.RUnlock()
	fake.podsMutex.RLock()
	defer fake.podsMutex.RUnlock()
	fake.podTemplatesMutex.RLock()
	defer fake.podTemplatesMutex.RUnlock()
	fake.replicationControllersMutex.RLock()
	defer fake.replicationControllersMutex.RUnlock()
	fake.resourceQuotasMutex.RLock()
	defer fake.resourceQuotasMutex.RUnlock()
	fake.secretsMutex.RLock()
	defer fake.secretsMutex.RUnlock()
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	fake.serviceAccountsMutex.RLock()
	defer fake.serviceAccountsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCoreClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
