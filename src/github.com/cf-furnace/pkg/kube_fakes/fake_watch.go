// This file was generated by counterfeiter
package kube_fakes

import (
	"sync"

	"k8s.io/kubernetes/pkg/watch"
)

type FakeWatch struct {
	StopStub              func()
	stopMutex             sync.RWMutex
	stopArgsForCall       []struct{}
	ResultChanStub        func() <-chan watch.Event
	resultChanMutex       sync.RWMutex
	resultChanArgsForCall []struct{}
	resultChanReturns     struct {
		result1 <-chan watch.Event
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWatch) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeWatch) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeWatch) ResultChan() <-chan watch.Event {
	fake.resultChanMutex.Lock()
	fake.resultChanArgsForCall = append(fake.resultChanArgsForCall, struct{}{})
	fake.recordInvocation("ResultChan", []interface{}{})
	fake.resultChanMutex.Unlock()
	if fake.ResultChanStub != nil {
		return fake.ResultChanStub()
	} else {
		return fake.resultChanReturns.result1
	}
}

func (fake *FakeWatch) ResultChanCallCount() int {
	fake.resultChanMutex.RLock()
	defer fake.resultChanMutex.RUnlock()
	return len(fake.resultChanArgsForCall)
}

func (fake *FakeWatch) ResultChanReturns(result1 <-chan watch.Event) {
	fake.ResultChanStub = nil
	fake.resultChanReturns = struct {
		result1 <-chan watch.Event
	}{result1}
}

func (fake *FakeWatch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	fake.resultChanMutex.RLock()
	defer fake.resultChanMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWatch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
